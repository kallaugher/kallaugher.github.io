<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>learning to code one error message at a time</description>
    <link>http://kallaugher.github.io/</link>
    <atom:link href="http://kallaugher.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 29 Aug 2016 23:02:32 -0400</pubDate>
    <lastBuildDate>Mon, 29 Aug 2016 23:02:32 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Rails Magic: Nested Forms and the Build Method</title>
        <description>&lt;p&gt;In this post, I’m going to take a look at nested forms in Rails, and in particular a closer look at a small, but useful method provided by ActiveRecord: the &lt;code&gt;build&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Imagine we’re building a basic blogging app in Rails, with users, posts and tags. We need a form to allow users to submit a new post. Rails has a number of useful helpers for creating forms. In this case, because &lt;code&gt;Post&lt;/code&gt; is a model, the logical form helper to use is &lt;code&gt;form_for&lt;/code&gt; – it binds a form to a model object, instead of having to repeat the object multiple times.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;erb&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= form_for @post do |f| %&amp;gt;

	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hidden_field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;

	&amp;lt;%= f.label :title %&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= f.text_field :title %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= f.text_field :content %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;

&amp;lt;% end %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a simple form with two fields - one for title, and one for content, as well as a hidden field that associated the current user with their post. So far, so good. But we still want to add tags for each post. Let’s have a look at the associations for each of the three models:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a User has many Posts&lt;/li&gt;
  &lt;li&gt;a Post belongs to a User&lt;/li&gt;
  &lt;li&gt;a Post has many Tags&lt;/li&gt;
  &lt;li&gt;a Tag has many Posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the has_many relationship between Posts and Tags going both ways, we’ll need a join table. We’ll therefore express the relationship between them as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a Post has many Post_Tags&lt;/li&gt;
  &lt;li&gt;a Post has many Tags, through Post_Tags&lt;/li&gt;
  &lt;li&gt;a Tag has many Post_Tags&lt;/li&gt;
  &lt;li&gt;a Tag has many Posts, throught Post_Tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This association between tags and posts makes adding tags to the form slightly more complicated. When we add tags, they are by definition associated with the post that is being created with the form above. Therefore, instead of creating a separate &lt;code&gt;form_for&lt;/code&gt; for tags, we want to nest an additional form inside the post &lt;code&gt;form_for&lt;/code&gt;, one that will maintain the relationship between posts and tags.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= form_for @post do |f| %&amp;gt;
	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hidden_field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;

	&amp;lt;%= f.label :title %&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= f.text_field :title %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= f.text_field :content %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collection_check_boxes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tag_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= f.fields_for :tags, @post.tags.build do |tags_attributes| %&amp;gt;
      &amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= tags_attributes.text_field :name %&amp;gt;
    &amp;lt;% end %&amp;gt;

	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;collection_check_boxes&lt;/code&gt; will iterate through the array &lt;code&gt;Tag.all&lt;/code&gt;, and create a checkbox for each existing tag. These tags already exist, and if their checkbox is selected, will be associated with the post being created as well. For more details, see the &lt;a href=&quot;http://apidock.com/rails/v4.0.2/ActionView/Helpers/FormOptionsHelper/collection_check_boxes&quot;&gt;APIdock documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fields_for&lt;/code&gt; form helper provides a field for creating a new tag. This is where the elusive &lt;code&gt;build&lt;/code&gt; method comes into play. If this were a separate &lt;code&gt;form_for&lt;/code&gt; for just the tags, you could define &lt;code&gt;@tag = Tag.new in the Tags controller, and the values from the form would populate that object. However, if we used &lt;code&gt;Tag.new&lt;/code&gt; in this case, there would be no association between the tag and the newly created post.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; method provides the same functionality as &lt;code&gt;.new&lt;/code&gt; would, but instantiates with the defined association. For example, &lt;code&gt;@post.tags.build&lt;/code&gt; instantiates a &lt;code&gt;Tag&lt;/code&gt; object that is already associated with &lt;code&gt;@post&lt;/code&gt;. Just like &lt;code&gt;.new&lt;/code&gt;, the object has not been saved to the database.&lt;/p&gt;

&lt;p&gt;Cementing the similarities with &lt;code&gt;.new&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt; is an alias for &lt;code&gt;ActiveRecord::Relation#new&lt;/code&gt; – it is simply &lt;code&gt;.new&lt;/code&gt; with relations baked in.&lt;/p&gt;

&lt;p&gt;Back to my example – if I wanted multiple blank form fields for adding multiple tags at once, I can simply run &lt;code&gt;.build&lt;/code&gt; multiple times, and for each instantiated object, a new field will appear. Once you’re using .build more than once, it is probably easier and simpler to move this to the post controller.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;new.html.erb&lt;/code&gt; will have the following snippet of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= f.fields_for :tags do |tags_attributes| %&amp;gt;
	&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= tags_attributes.text_field :name %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The controller will have:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
	&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
   	&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create blank form fields for our additional tags, and three correctly associated (but unsaved) tag objects, ready to be populated with the form answers.&lt;/p&gt;

&lt;h2 id=&quot;hasone-relationships&quot;&gt;Has_one relationships&lt;/h2&gt;

&lt;p&gt;One additional note: if you use &lt;code&gt;build&lt;/code&gt; with a has_one association, the syntax is slightly different. For example, if each post had by definition only a single tag:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;	&lt;span class=&quot;c1&quot;&gt;# we would expect to use:&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;#spoiler: this won&#39;t work&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;#instead, use:&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_tag&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks for reading! If you have any additional information on anything touched on above, leave a comment below.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Aug 2016 05:00:00 -0400</pubDate>
        <link>http://kallaugher.github.io/2016/08/26/built-this-city/</link>
        <guid isPermaLink="true">http://kallaugher.github.io/2016/08/26/built-this-city/</guid>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>Commitment Issues</title>
        <description>&lt;p&gt;If you’re British, you were probably first familiar with ‘git’ as an ‘unpleasant or contemptible person’. Otherwise, you’re probably familiar with Git as the version control system developed by Linus Torvalds, the creator of Linux. As much as I enjoy discussing British insults, I’m going to focus this blog post on the latter case.&lt;/p&gt;

&lt;p&gt;Git is an incredibly helpful tool for developers, and most code newbies become familiar with the tool fairly early on. The basic git workflow is pretty straightforward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initialize a repository with &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;add files with &lt;code&gt;git add&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;commit (take a snapshot of the current state of your files) with &lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;push to your remote repository with &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So far, relatively straightforward – but Git is capable of so much more. I’m going to focus on local git commands, rather than anything using a remote repository (but check back for a future blog post on that!).&lt;/p&gt;

&lt;h2 id=&quot;branching-out&quot;&gt;Branching Out&lt;/h2&gt;

&lt;p&gt;What if you want to create a new feature, but want to maintain your current code? Not a problem! Create a new branch in your repository.&lt;/p&gt;

&lt;p&gt;Say I’m creating an app for an animal shelter. I have a barebones, but functioning app, which allows me to track the animals currently at the shelter. I can easily print out my first few commits using &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c4709f&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kallaugher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b472d69&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kallaugher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b5ae131&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kallaugher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m ready to add a new feature to the app, showing the schedule for the employees of the shelter – but I don’t want to mess up the already existing functionality. Time to add a new branch!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create Employee class&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create Schedule class&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add schedule routes to controller&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;git checkout&lt;/code&gt; command is key here. This confused me at first because I guessed (incorrectly) that it mean check out as in leave a branch – the opposite is actually true. Think of it as checking out a book from a library when you’re ready to read it for a while (shout out to &lt;a href=&quot;http://vaidehi.weebly.com/&quot;&gt;Vaidehi&lt;/a&gt; for that helpful metaphor).&lt;/p&gt;

&lt;p&gt;What if I’m in the middle of working on this new feature, when I find out we’re now accepting goldfish at the shelter, and I need to immediately add that functionality to the basic app? Not a problem! Just checkout the &lt;code&gt;master&lt;/code&gt; branch (make sure to leave out the &lt;code&gt;-b&lt;/code&gt; flag), edit and commit there, and then return to &lt;code&gt;employee-schedule&lt;/code&gt; branch when you’re ready:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goldfish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add goldfish to adoptable pets&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When that feature is fully implemented, it’s easy to merge the two branches into one. Just return to your &lt;code&gt;master&lt;/code&gt; branch, merge in &lt;code&gt;employee-schedule&lt;/code&gt;, and then delete it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;visualizing-your-branches&quot;&gt;Visualizing your branches&lt;/h2&gt;

&lt;p&gt;There are some great tools for visualizing your commit history (&lt;a href=&quot;http://gitx.frim.nl/&quot;&gt;GitX&lt;/a&gt; is one example). However, you can also get a pretty great depiction just from your terminal. Adding a few flags to your &lt;code&gt;git log&lt;/code&gt; command will instantly illustrate your commit and merging history:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbrev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decorate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e18e76&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HEAD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Merge&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;employee-schedule&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20808&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ac786&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ff37af4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Schedule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4136&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d24&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c647697&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goldfish&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e26c5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Goldfish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/  
* 8b4984e Add AdoptionController
* 1c4709f Add Dog class
* b472d69 Add Cat class
* b5ae131 Initial commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see where the branches diverge and come together. This is a simple example, but this visual would be even more helpful for a more complex project with multiple branches.&lt;/p&gt;

&lt;h2 id=&quot;if-i-could-turn-back-time&quot;&gt;If I could turn back time&lt;/h2&gt;

&lt;p&gt;What if you’ve made a terrible mistake in your last commit, and in the immortal words of Cher, need to turn back time? Not a problem! If it’s an entire commit, you can use &lt;code&gt;git revert&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revert&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20808&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eb&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ecbe97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Revert&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add schedule template&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will not delete your last commit, but will instead create a new commit without the previous changes. If you want no trace left, you can use &lt;code&gt;git reset&lt;/code&gt; instead. You can also use &lt;code&gt;reset&lt;/code&gt; to undo merges – see &lt;a href=&quot;https://git-scm.com/blog/2010/03/02/undoing-merges.html&quot;&gt;here&lt;/a&gt; for more info.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Here are some great resources I used while writing this post:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://think-like-a-git.net/&quot;&gt;Think Like A Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www-cs-students.stanford.edu/~blynn/gitmagic/&quot;&gt;Git Magic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;This is barely the tip of the iceberg when it comes to Git’s functionality. I hope to dive in again in a future blog post, so leave me your favorite resources (and your preferred Git pun for the next title)!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Aug 2016 13:06:25 -0400</pubDate>
        <link>http://kallaugher.github.io/2016/08/02/commitment-issues/</link>
        <guid isPermaLink="true">http://kallaugher.github.io/2016/08/02/commitment-issues/</guid>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>Down the Rabbit Hole</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/white-rabbit.jpg&quot; class=&quot;right&quot; caption=&quot;Down the debugging rabbit hole&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Error messages are a little intimidating as a code newbie, but an important step is learning to embrace them. I’m learning with each error, and there’s nothing like the feeling of successfully debugging your code.&lt;/p&gt;

&lt;p&gt;I ran across an interesting error yesterday, and I thought I would begin my inaugural blog post by digging into it. I was writing a simple program that require input from a user, using gets.&lt;/p&gt;

&lt;h2 id=&quot;gets--simple-&quot;&gt;#gets == simple ?&lt;/h2&gt;

&lt;p&gt;At first glance, &lt;code&gt;#gets&lt;/code&gt; seems to be a very straightforward method, allowing you to save something that a user inputs at the command line.  It was one of the very first Ruby methods that I learned. I thought it was pretty cool — it immediately adds interactivity, and made me feel like I was actually creating something dynamic.&lt;/p&gt;

&lt;p&gt;Let’s give a simple example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, what is your name?&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll be asked for my name, enter it, and the terminal will output “Hello Alice!”&lt;/p&gt;

&lt;p&gt;So far, so good. Easy, right? I didn’t really give much thought to what was going on under the hood until that strange error yesterday:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jukebox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;gets&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_sysopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Errno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENOENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Clearly there is something strange going on with gets here, but beyond that I don’t have much of a clue. A few minutes googling and experimenting and I came up with a couple of answers on stackoverflow and ruby-forum.com. A couple of solutions were offered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;using &lt;code&gt;$stdin.gets&lt;/code&gt; instead of &lt;code&gt;gets&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;adding ARGV.clear on the line before &lt;code&gt;gets.chomp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of those worked for me, and my code was running smoothly! It’s pretty tempting at this point to give myself an internal high five and move on, but I’m going to try and dig in a little further.&lt;/p&gt;

&lt;h2 id=&quot;a-closer-look-at-gets&quot;&gt;A closer look at #gets&lt;/h2&gt;

&lt;p&gt;What happens when you call &lt;code&gt;#gets&lt;/code&gt;? If you search Ruby Docs, you’ll find two separate methods, one from the &lt;code&gt;Kernel&lt;/code&gt; class, and one from the &lt;code&gt;IO&lt;/code&gt; class. Let’s have a look at excerpts of the two definitions:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Kernel::gets&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;Returns (and assigns to $_) the next line from the list of files in ARGV (or $*), or from standard input if no files are present on the command &amp;gt;line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;IO::gets&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;Reads the next “line” from the I/O stream&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;ARGV&lt;/code&gt; sounds familiar from the second solution I found – now what is it? &lt;code&gt;ARGV&lt;/code&gt; is a constant that stores the values input to a program via the command line. (For more information, see Joe O’Conor’s &lt;a href=&quot;http://jnoconor.github.io/blog/2013/10/13/a-short-explanation-of-argv/&quot;&gt;helpful blog post&lt;/a&gt;.) If it is empty, &lt;code&gt;Kernel::gets&lt;/code&gt; will read from the standard input.&lt;/p&gt;

&lt;p&gt;My best guess is that since my error disappears if I use &lt;code&gt;ARGV.clear&lt;/code&gt; before &lt;code&gt;gets.chomp&lt;/code&gt;, the issue lies in some value formerly input to the command line remaining in &lt;code&gt;ARGV&lt;/code&gt;, and preventing &lt;code&gt;gets&lt;/code&gt; from automatically returning the next line from the standard input. I am therefore using the first &lt;code&gt;gets&lt;/code&gt;, from the &lt;code&gt;Kernel&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#gets&lt;/code&gt; method that I want always read from the I/O stream (taking in the input from the user). Therefore, I can eliminate this error, by using &lt;code&gt;IO::gets&lt;/code&gt; instead of &lt;code&gt;Kernel::gets&lt;/code&gt;. I can specify this by using &lt;code&gt;$stdin.gets&lt;/code&gt; (just as my original googling revealed!).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you’ve enjoyed my trip down the debugging rabbit hole! if you ever encountered this problem before, or have any information to share about &lt;code&gt;gets&lt;/code&gt;, be sure to post a comment below!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Aug 2016 13:06:25 -0400</pubDate>
        <link>http://kallaugher.github.io/2016/08/02/down-the-rabbit-hole/</link>
        <guid isPermaLink="true">http://kallaugher.github.io/2016/08/02/down-the-rabbit-hole/</guid>
        
        
        <category>code</category>
        
      </item>
    
  </channel>
</rss>
